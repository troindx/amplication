/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Pixel } from "./Pixel";
import { PixelCountArgs } from "./PixelCountArgs";
import { PixelFindManyArgs } from "./PixelFindManyArgs";
import { PixelFindUniqueArgs } from "./PixelFindUniqueArgs";
import { CreatePixelArgs } from "./CreatePixelArgs";
import { UpdatePixelArgs } from "./UpdatePixelArgs";
import { DeletePixelArgs } from "./DeletePixelArgs";
import { Mood } from "../../mood/base/Mood";
import { User } from "../../user/base/User";
import { PixelService } from "../pixel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Pixel)
export class PixelResolverBase {
  constructor(
    protected readonly service: PixelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "read",
    possession: "any",
  })
  async _pixelsMeta(
    @graphql.Args() args: PixelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pixel])
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "read",
    possession: "any",
  })
  async pixels(@graphql.Args() args: PixelFindManyArgs): Promise<Pixel[]> {
    return this.service.pixels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pixel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "read",
    possession: "own",
  })
  async pixel(
    @graphql.Args() args: PixelFindUniqueArgs
  ): Promise<Pixel | null> {
    const result = await this.service.pixel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pixel)
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "create",
    possession: "any",
  })
  async createPixel(@graphql.Args() args: CreatePixelArgs): Promise<Pixel> {
    return await this.service.createPixel({
      ...args,
      data: {
        ...args.data,

        mood: args.data.mood
          ? {
              connect: args.data.mood,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pixel)
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "update",
    possession: "any",
  })
  async updatePixel(
    @graphql.Args() args: UpdatePixelArgs
  ): Promise<Pixel | null> {
    try {
      return await this.service.updatePixel({
        ...args,
        data: {
          ...args.data,

          mood: args.data.mood
            ? {
                connect: args.data.mood,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pixel)
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "delete",
    possession: "any",
  })
  async deletePixel(
    @graphql.Args() args: DeletePixelArgs
  ): Promise<Pixel | null> {
    try {
      return await this.service.deletePixel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Mood, {
    nullable: true,
    name: "mood",
  })
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "read",
    possession: "any",
  })
  async getMood(@graphql.Parent() parent: Pixel): Promise<Mood | null> {
    const result = await this.service.getMood(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Pixel): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
