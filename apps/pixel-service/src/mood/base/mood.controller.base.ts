/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MoodService } from "../mood.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MoodCreateInput } from "./MoodCreateInput";
import { Mood } from "./Mood";
import { MoodFindManyArgs } from "./MoodFindManyArgs";
import { MoodWhereUniqueInput } from "./MoodWhereUniqueInput";
import { MoodUpdateInput } from "./MoodUpdateInput";
import { PixelFindManyArgs } from "../../pixel/base/PixelFindManyArgs";
import { Pixel } from "../../pixel/base/Pixel";
import { PixelWhereUniqueInput } from "../../pixel/base/PixelWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MoodControllerBase {
  constructor(
    protected readonly service: MoodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mood })
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMood(@common.Body() data: MoodCreateInput): Promise<Mood> {
    return await this.service.createMood({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Mood] })
  @ApiNestedQuery(MoodFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async moods(@common.Req() request: Request): Promise<Mood[]> {
    const args = plainToClass(MoodFindManyArgs, request.query);
    return this.service.moods({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mood })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mood(
    @common.Param() params: MoodWhereUniqueInput
  ): Promise<Mood | null> {
    const result = await this.service.mood({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mood })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMood(
    @common.Param() params: MoodWhereUniqueInput,
    @common.Body() data: MoodUpdateInput
  ): Promise<Mood | null> {
    try {
      return await this.service.updateMood({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mood })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMood(
    @common.Param() params: MoodWhereUniqueInput
  ): Promise<Mood | null> {
    try {
      return await this.service.deleteMood({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pixels")
  @ApiNestedQuery(PixelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "read",
    possession: "any",
  })
  async findPixels(
    @common.Req() request: Request,
    @common.Param() params: MoodWhereUniqueInput
  ): Promise<Pixel[]> {
    const query = plainToClass(PixelFindManyArgs, request.query);
    const results = await this.service.findPixels(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        mood: {
          select: {
            id: true,
          },
        },

        note: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pixels")
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "update",
    possession: "any",
  })
  async connectPixels(
    @common.Param() params: MoodWhereUniqueInput,
    @common.Body() body: PixelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pixels: {
        connect: body,
      },
    };
    await this.service.updateMood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pixels")
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "update",
    possession: "any",
  })
  async updatePixels(
    @common.Param() params: MoodWhereUniqueInput,
    @common.Body() body: PixelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pixels: {
        set: body,
      },
    };
    await this.service.updateMood({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pixels")
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "update",
    possession: "any",
  })
  async disconnectPixels(
    @common.Param() params: MoodWhereUniqueInput,
    @common.Body() body: PixelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pixels: {
        disconnect: body,
      },
    };
    await this.service.updateMood({
      where: params,
      data,
      select: { id: true },
    });
  }
}
