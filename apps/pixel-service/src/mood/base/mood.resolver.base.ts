/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Mood } from "./Mood";
import { MoodCountArgs } from "./MoodCountArgs";
import { MoodFindManyArgs } from "./MoodFindManyArgs";
import { MoodFindUniqueArgs } from "./MoodFindUniqueArgs";
import { CreateMoodArgs } from "./CreateMoodArgs";
import { UpdateMoodArgs } from "./UpdateMoodArgs";
import { DeleteMoodArgs } from "./DeleteMoodArgs";
import { PixelFindManyArgs } from "../../pixel/base/PixelFindManyArgs";
import { Pixel } from "../../pixel/base/Pixel";
import { MoodService } from "../mood.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Mood)
export class MoodResolverBase {
  constructor(
    protected readonly service: MoodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "read",
    possession: "any",
  })
  async _moodsMeta(
    @graphql.Args() args: MoodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Mood])
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "read",
    possession: "any",
  })
  async moods(@graphql.Args() args: MoodFindManyArgs): Promise<Mood[]> {
    return this.service.moods(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Mood, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "read",
    possession: "own",
  })
  async mood(@graphql.Args() args: MoodFindUniqueArgs): Promise<Mood | null> {
    const result = await this.service.mood(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mood)
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "create",
    possession: "any",
  })
  async createMood(@graphql.Args() args: CreateMoodArgs): Promise<Mood> {
    return await this.service.createMood({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mood)
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "update",
    possession: "any",
  })
  async updateMood(@graphql.Args() args: UpdateMoodArgs): Promise<Mood | null> {
    try {
      return await this.service.updateMood({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mood)
  @nestAccessControl.UseRoles({
    resource: "Mood",
    action: "delete",
    possession: "any",
  })
  async deleteMood(@graphql.Args() args: DeleteMoodArgs): Promise<Mood | null> {
    try {
      return await this.service.deleteMood(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Pixel], { name: "pixels" })
  @nestAccessControl.UseRoles({
    resource: "Pixel",
    action: "read",
    possession: "any",
  })
  async findPixels(
    @graphql.Parent() parent: Mood,
    @graphql.Args() args: PixelFindManyArgs
  ): Promise<Pixel[]> {
    const results = await this.service.findPixels(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
