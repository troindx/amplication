/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Mood, // @ts-ignore
  Pixel,
} from "@prisma/client";

export class MoodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MoodCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoodCountArgs>
  ): Promise<number> {
    return this.prisma.mood.count(args);
  }

  async moods<T extends Prisma.MoodFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoodFindManyArgs>
  ): Promise<Mood[]> {
    return this.prisma.mood.findMany(args);
  }
  async mood<T extends Prisma.MoodFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoodFindUniqueArgs>
  ): Promise<Mood | null> {
    return this.prisma.mood.findUnique(args);
  }
  async createMood<T extends Prisma.MoodCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoodCreateArgs>
  ): Promise<Mood> {
    return this.prisma.mood.create<T>(args);
  }
  async updateMood<T extends Prisma.MoodUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoodUpdateArgs>
  ): Promise<Mood> {
    return this.prisma.mood.update<T>(args);
  }
  async deleteMood<T extends Prisma.MoodDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoodDeleteArgs>
  ): Promise<Mood> {
    return this.prisma.mood.delete(args);
  }

  async findPixels(
    parentId: string,
    args: Prisma.PixelFindManyArgs
  ): Promise<Pixel[]> {
    return this.prisma.mood
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pixels(args);
  }
}
